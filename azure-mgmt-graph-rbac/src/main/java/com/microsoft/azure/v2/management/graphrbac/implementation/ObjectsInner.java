/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.v2.management.graphrbac.implementation;

import com.microsoft.azure.v2.AzureProxy;
import com.microsoft.azure.v2.CloudException;
import com.microsoft.azure.v2.Page;
import com.microsoft.azure.v2.PagedList;
import com.microsoft.azure.v2.management.graphrbac.GetObjectsParameters;
import com.microsoft.azure.v2.management.graphrbac.GraphErrorException;
import com.microsoft.rest.v2.BodyResponse;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.Validator;
import com.microsoft.rest.v2.annotations.BodyParam;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.HeaderParam;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.PathParam;
import com.microsoft.rest.v2.annotations.POST;
import com.microsoft.rest.v2.annotations.QueryParam;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import io.reactivex.Maybe;
import io.reactivex.Observable;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * Objects.
 */
public final class ObjectsInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private ObjectsService service;

    /**
     * The service client containing this operation class.
     */
    private GraphRbacManagementClientImpl client;

    /**
     * Initializes an instance of ObjectsInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public ObjectsInner(GraphRbacManagementClientImpl client) {
        this.service = AzureProxy.create(ObjectsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Objects to be used by the
     * proxy service to perform REST calls.
     */
    @Host("https://graph.windows.net")
    private interface ObjectsService {
        @GET("{tenantID}/me")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<AADObjectInner>> getCurrentUser(@PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @POST("{tenantID}/getObjectsByObjectIds")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl<AADObjectInner>>> getObjectsByObjectIds(@PathParam("tenantID") String tenantID, @BodyParam("application/json; charset=utf-8") GetObjectsParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl<AADObjectInner>>> getObjectsByObjectIdsNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);
    }

    /**
     * Gets the details for the currently logged-in user.
     *
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AADObjectInner object if successful.
     */
    public AADObjectInner getCurrentUser() {
        return getCurrentUserAsync().blockingGet();
    }

    /**
     * Gets the details for the currently logged-in user.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<AADObjectInner> getCurrentUserAsync(ServiceCallback<AADObjectInner> serviceCallback) {
        return ServiceFuture.fromBody(getCurrentUserAsync(), serviceCallback);
    }

    /**
     * Gets the details for the currently logged-in user.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<AADObjectInner>> getCurrentUserWithRestResponseAsync() {
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getCurrentUser(this.client.tenantID(), this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Gets the details for the currently logged-in user.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<AADObjectInner> getCurrentUserAsync() {
        return getCurrentUserWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<AADObjectInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Gets AD group membership for the specified AD object IDs.
     *
     * @param parameters Objects filtering parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;AADObjectInner&gt; object if successful.
     */
    public PagedList<AADObjectInner> getObjectsByObjectIds(@NonNull GetObjectsParameters parameters) {
        Page<AADObjectInner> response = getObjectsByObjectIdsSinglePageAsync(parameters).blockingGet();
        return new PagedList<AADObjectInner>(response) {
            @Override
            public Page<AADObjectInner> nextPage(String nextLink) {
                return getObjectsByObjectIdsNextSinglePageAsync(nextLink).blockingGet();
            }
        };
    }

    /**
     * Gets AD group membership for the specified AD object IDs.
     *
     * @param parameters Objects filtering parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;AADObjectInner&gt; object.
     */
    public Observable<Page<AADObjectInner>> getObjectsByObjectIdsAsync(@NonNull GetObjectsParameters parameters) {
        return getObjectsByObjectIdsSinglePageAsync(parameters)
            .toObservable()
            .concatMap((Page<AADObjectInner> page) -> {
                String nextLink = page.nextPageLink();
                if (nextLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(getObjectsByObjectIdsNextAsync(nextLink));
            });
    }

    /**
     * Gets AD group membership for the specified AD object IDs.
     *
     * @param parameters Objects filtering parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;AADObjectInner&gt;&gt; object if successful.
     */
    public Single<Page<AADObjectInner>> getObjectsByObjectIdsSinglePageAsync(@NonNull GetObjectsParameters parameters) {
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.getObjectsByObjectIds(this.client.tenantID(), parameters, this.client.apiVersion(), this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<AADObjectInner>> res) -> res.body());
    }

    /**
     * Gets AD group membership for the specified AD object IDs.
     *
     * @param nextLink Next link for the list operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;AADObjectInner&gt; object if successful.
     */
    public PagedList<AADObjectInner> getObjectsByObjectIdsNext(@NonNull String nextLink) {
        Page<AADObjectInner> response = getObjectsByObjectIdsNextSinglePageAsync(nextLink).blockingGet();
        return new PagedList<AADObjectInner>(response) {
            @Override
            public Page<AADObjectInner> nextPage(String nextLink) {
                return getObjectsByObjectIdsNextSinglePageAsync(nextLink).blockingGet();
            }
        };
    }

    /**
     * Gets AD group membership for the specified AD object IDs.
     *
     * @param nextLink Next link for the list operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;AADObjectInner&gt; object.
     */
    public Observable<Page<AADObjectInner>> getObjectsByObjectIdsNextAsync(@NonNull String nextLink) {
        return getObjectsByObjectIdsNextSinglePageAsync(nextLink)
            .toObservable()
            .concatMap((Page<AADObjectInner> page) -> {
                String nextLink1 = page.nextPageLink();
                if (nextLink1 == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(getObjectsByObjectIdsNextAsync(nextLink1));
            });
    }

    /**
     * Gets AD group membership for the specified AD object IDs.
     *
     * @param nextLink Next link for the list operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;AADObjectInner&gt;&gt; object if successful.
     */
    public Single<Page<AADObjectInner>> getObjectsByObjectIdsNextSinglePageAsync(@NonNull String nextLink) {
        if (nextLink == null) {
            throw new IllegalArgumentException("Parameter nextLink is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        String nextUrl = String.format("%s/%s", this.client.tenantID(), nextLink);
        return service.getObjectsByObjectIdsNext(nextUrl, this.client.apiVersion(), this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<AADObjectInner>> res) -> res.body());
    }
}
