/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.v2.management.graphrbac.implementation;

import com.microsoft.azure.v2.AzureProxy;
import com.microsoft.azure.v2.CloudException;
import com.microsoft.azure.v2.Page;
import com.microsoft.azure.v2.PagedList;
import com.microsoft.azure.v2.management.resources.fluentcore.collection.InnerSupportsDelete;
import com.microsoft.rest.v2.BodyResponse;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.Validator;
import com.microsoft.rest.v2.annotations.BodyParam;
import com.microsoft.rest.v2.annotations.DELETE;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.HeaderParam;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.PathParam;
import com.microsoft.rest.v2.annotations.PUT;
import com.microsoft.rest.v2.annotations.QueryParam;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import io.reactivex.Maybe;
import io.reactivex.Observable;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * RoleDefinitions.
 */
public final class RoleDefinitionsInner implements InnerSupportsDelete<RoleDefinitionInner> {
    /**
     * The proxy service used to perform REST calls.
     */
    private RoleDefinitionsService service;

    /**
     * The service client containing this operation class.
     */
    private AuthorizationManagementClientImpl client;

    /**
     * Initializes an instance of RoleDefinitionsInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public RoleDefinitionsInner(AuthorizationManagementClientImpl client) {
        this.service = AzureProxy.create(RoleDefinitionsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for RoleDefinitions to be used
     * by the proxy service to perform REST calls.
     */
    @Host("https://management.azure.com")
    private interface RoleDefinitionsService {
        @DELETE("{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<RoleDefinitionInner>> delete(@PathParam(value = "scope", encoded = true) String scope, @PathParam("roleDefinitionId") String roleDefinitionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<RoleDefinitionInner>> get(@PathParam(value = "scope", encoded = true) String scope, @PathParam("roleDefinitionId") String roleDefinitionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @PUT("{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<RoleDefinitionInner>> createOrUpdate(@PathParam(value = "scope", encoded = true) String scope, @PathParam("roleDefinitionId") String roleDefinitionId, @BodyParam("application/json; charset=utf-8") RoleDefinitionInner roleDefinition, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{scope}/providers/Microsoft.Authorization/roleDefinitions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl<RoleDefinitionInner>>> list(@PathParam(value = "scope", encoded = true) String scope, @QueryParam("$filter") String filter, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{roleId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<RoleDefinitionInner>> getById(@PathParam(value = "roleId", encoded = true) String roleId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl<RoleDefinitionInner>>> listNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);
    }

    /**
     * Deletes a role definition.
     *
     * @param scope The scope of the role definition.
     * @param roleDefinitionId The ID of the role definition to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the RoleDefinitionInner object if successful.
     */
    public RoleDefinitionInner delete(@NonNull String scope, @NonNull String roleDefinitionId) {
        return deleteAsync(scope, roleDefinitionId).blockingGet();
    }

    /**
     * Deletes a role definition.
     *
     * @param scope The scope of the role definition.
     * @param roleDefinitionId The ID of the role definition to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<RoleDefinitionInner> deleteAsync(@NonNull String scope, @NonNull String roleDefinitionId, ServiceCallback<RoleDefinitionInner> serviceCallback) {
        return ServiceFuture.fromBody(deleteAsync(scope, roleDefinitionId), serviceCallback);
    }

    /**
     * Deletes a role definition.
     *
     * @param scope The scope of the role definition.
     * @param roleDefinitionId The ID of the role definition to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<RoleDefinitionInner>> deleteWithRestResponseAsync(@NonNull String scope, @NonNull String roleDefinitionId) {
        if (scope == null) {
            throw new IllegalArgumentException("Parameter scope is required and cannot be null.");
        }
        if (roleDefinitionId == null) {
            throw new IllegalArgumentException("Parameter roleDefinitionId is required and cannot be null.");
        }
        final String apiVersion = "2018-01-01-preview";
        return service.delete(scope, roleDefinitionId, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Deletes a role definition.
     *
     * @param scope The scope of the role definition.
     * @param roleDefinitionId The ID of the role definition to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<RoleDefinitionInner> deleteAsync(@NonNull String scope, @NonNull String roleDefinitionId) {
        return deleteWithRestResponseAsync(scope, roleDefinitionId)
            .flatMapMaybe((BodyResponse<RoleDefinitionInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get role definition by name (GUID).
     *
     * @param scope The scope of the role definition.
     * @param roleDefinitionId The ID of the role definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the RoleDefinitionInner object if successful.
     */
    public RoleDefinitionInner get(@NonNull String scope, @NonNull String roleDefinitionId) {
        return getAsync(scope, roleDefinitionId).blockingGet();
    }

    /**
     * Get role definition by name (GUID).
     *
     * @param scope The scope of the role definition.
     * @param roleDefinitionId The ID of the role definition.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<RoleDefinitionInner> getAsync(@NonNull String scope, @NonNull String roleDefinitionId, ServiceCallback<RoleDefinitionInner> serviceCallback) {
        return ServiceFuture.fromBody(getAsync(scope, roleDefinitionId), serviceCallback);
    }

    /**
     * Get role definition by name (GUID).
     *
     * @param scope The scope of the role definition.
     * @param roleDefinitionId The ID of the role definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<RoleDefinitionInner>> getWithRestResponseAsync(@NonNull String scope, @NonNull String roleDefinitionId) {
        if (scope == null) {
            throw new IllegalArgumentException("Parameter scope is required and cannot be null.");
        }
        if (roleDefinitionId == null) {
            throw new IllegalArgumentException("Parameter roleDefinitionId is required and cannot be null.");
        }
        final String apiVersion = "2018-01-01-preview";
        return service.get(scope, roleDefinitionId, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Get role definition by name (GUID).
     *
     * @param scope The scope of the role definition.
     * @param roleDefinitionId The ID of the role definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<RoleDefinitionInner> getAsync(@NonNull String scope, @NonNull String roleDefinitionId) {
        return getWithRestResponseAsync(scope, roleDefinitionId)
            .flatMapMaybe((BodyResponse<RoleDefinitionInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Creates or updates a role definition.
     *
     * @param scope The scope of the role definition.
     * @param roleDefinitionId The ID of the role definition.
     * @param roleDefinition The values for the role definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the RoleDefinitionInner object if successful.
     */
    public RoleDefinitionInner createOrUpdate(@NonNull String scope, @NonNull String roleDefinitionId, @NonNull RoleDefinitionInner roleDefinition) {
        return createOrUpdateAsync(scope, roleDefinitionId, roleDefinition).blockingGet();
    }

    /**
     * Creates or updates a role definition.
     *
     * @param scope The scope of the role definition.
     * @param roleDefinitionId The ID of the role definition.
     * @param roleDefinition The values for the role definition.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<RoleDefinitionInner> createOrUpdateAsync(@NonNull String scope, @NonNull String roleDefinitionId, @NonNull RoleDefinitionInner roleDefinition, ServiceCallback<RoleDefinitionInner> serviceCallback) {
        return ServiceFuture.fromBody(createOrUpdateAsync(scope, roleDefinitionId, roleDefinition), serviceCallback);
    }

    /**
     * Creates or updates a role definition.
     *
     * @param scope The scope of the role definition.
     * @param roleDefinitionId The ID of the role definition.
     * @param roleDefinition The values for the role definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<RoleDefinitionInner>> createOrUpdateWithRestResponseAsync(@NonNull String scope, @NonNull String roleDefinitionId, @NonNull RoleDefinitionInner roleDefinition) {
        if (scope == null) {
            throw new IllegalArgumentException("Parameter scope is required and cannot be null.");
        }
        if (roleDefinitionId == null) {
            throw new IllegalArgumentException("Parameter roleDefinitionId is required and cannot be null.");
        }
        if (roleDefinition == null) {
            throw new IllegalArgumentException("Parameter roleDefinition is required and cannot be null.");
        }
        Validator.validate(roleDefinition);
        final String apiVersion = "2018-01-01-preview";
        return service.createOrUpdate(scope, roleDefinitionId, roleDefinition, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Creates or updates a role definition.
     *
     * @param scope The scope of the role definition.
     * @param roleDefinitionId The ID of the role definition.
     * @param roleDefinition The values for the role definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<RoleDefinitionInner> createOrUpdateAsync(@NonNull String scope, @NonNull String roleDefinitionId, @NonNull RoleDefinitionInner roleDefinition) {
        return createOrUpdateWithRestResponseAsync(scope, roleDefinitionId, roleDefinition)
            .flatMapMaybe((BodyResponse<RoleDefinitionInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get all role definitions that are applicable at scope and above.
     *
     * @param scope The scope of the role definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;RoleDefinitionInner&gt; object if successful.
     */
    public PagedList<RoleDefinitionInner> list(@NonNull String scope) {
        Page<RoleDefinitionInner> response = listSinglePageAsync(scope).blockingGet();
        return new PagedList<RoleDefinitionInner>(response) {
            @Override
            public Page<RoleDefinitionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Get all role definitions that are applicable at scope and above.
     *
     * @param scope The scope of the role definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;RoleDefinitionInner&gt; object.
     */
    public Observable<Page<RoleDefinitionInner>> listAsync(@NonNull String scope) {
        return listSinglePageAsync(scope)
            .toObservable()
            .concatMap((Page<RoleDefinitionInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listNextAsync(nextPageLink));
            });
    }

    /**
     * Get all role definitions that are applicable at scope and above.
     *
     * @param scope The scope of the role definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;RoleDefinitionInner&gt;&gt; object if successful.
     */
    public Single<Page<RoleDefinitionInner>> listSinglePageAsync(@NonNull String scope) {
        if (scope == null) {
            throw new IllegalArgumentException("Parameter scope is required and cannot be null.");
        }
        final String apiVersion = "2018-01-01-preview";
        final String filter = null;
        return service.list(scope, filter, apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<RoleDefinitionInner>> res) -> res.body());
    }

    /**
     * Get all role definitions that are applicable at scope and above.
     *
     * @param scope The scope of the role definition.
     * @param filter The filter to apply on the operation. Use atScopeAndBelow filter to search below the given scope as well.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;RoleDefinitionInner&gt; object if successful.
     */
    public PagedList<RoleDefinitionInner> list(@NonNull String scope, String filter) {
        Page<RoleDefinitionInner> response = listSinglePageAsync(scope, filter).blockingGet();
        return new PagedList<RoleDefinitionInner>(response) {
            @Override
            public Page<RoleDefinitionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Get all role definitions that are applicable at scope and above.
     *
     * @param scope The scope of the role definition.
     * @param filter The filter to apply on the operation. Use atScopeAndBelow filter to search below the given scope as well.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;RoleDefinitionInner&gt; object.
     */
    public Observable<Page<RoleDefinitionInner>> listAsync(@NonNull String scope, String filter) {
        return listSinglePageAsync(scope, filter)
            .toObservable()
            .concatMap((Page<RoleDefinitionInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listNextAsync(nextPageLink));
            });
    }

    /**
     * Get all role definitions that are applicable at scope and above.
     *
     * @param scope The scope of the role definition.
     * @param filter The filter to apply on the operation. Use atScopeAndBelow filter to search below the given scope as well.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;RoleDefinitionInner&gt;&gt; object if successful.
     */
    public Single<Page<RoleDefinitionInner>> listSinglePageAsync(@NonNull String scope, String filter) {
        if (scope == null) {
            throw new IllegalArgumentException("Parameter scope is required and cannot be null.");
        }
        final String apiVersion = "2018-01-01-preview";
        return service.list(scope, filter, apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<RoleDefinitionInner>> res) -> res.body());
    }

    /**
     * Gets a role definition by ID.
     *
     * @param roleId The fully qualified role definition ID. Use the format, /subscriptions/{guid}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId} for subscription level role definitions, or /providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId} for tenant level role definitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the RoleDefinitionInner object if successful.
     */
    public RoleDefinitionInner getById(@NonNull String roleId) {
        return getByIdAsync(roleId).blockingGet();
    }

    /**
     * Gets a role definition by ID.
     *
     * @param roleId The fully qualified role definition ID. Use the format, /subscriptions/{guid}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId} for subscription level role definitions, or /providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId} for tenant level role definitions.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<RoleDefinitionInner> getByIdAsync(@NonNull String roleId, ServiceCallback<RoleDefinitionInner> serviceCallback) {
        return ServiceFuture.fromBody(getByIdAsync(roleId), serviceCallback);
    }

    /**
     * Gets a role definition by ID.
     *
     * @param roleId The fully qualified role definition ID. Use the format, /subscriptions/{guid}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId} for subscription level role definitions, or /providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId} for tenant level role definitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<RoleDefinitionInner>> getByIdWithRestResponseAsync(@NonNull String roleId) {
        if (roleId == null) {
            throw new IllegalArgumentException("Parameter roleId is required and cannot be null.");
        }
        final String apiVersion = "2018-01-01-preview";
        return service.getById(roleId, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Gets a role definition by ID.
     *
     * @param roleId The fully qualified role definition ID. Use the format, /subscriptions/{guid}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId} for subscription level role definitions, or /providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId} for tenant level role definitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<RoleDefinitionInner> getByIdAsync(@NonNull String roleId) {
        return getByIdWithRestResponseAsync(roleId)
            .flatMapMaybe((BodyResponse<RoleDefinitionInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get all role definitions that are applicable at scope and above.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;RoleDefinitionInner&gt; object if successful.
     */
    public PagedList<RoleDefinitionInner> listNext(@NonNull String nextPageLink) {
        Page<RoleDefinitionInner> response = listNextSinglePageAsync(nextPageLink).blockingGet();
        return new PagedList<RoleDefinitionInner>(response) {
            @Override
            public Page<RoleDefinitionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Get all role definitions that are applicable at scope and above.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;RoleDefinitionInner&gt; object.
     */
    public Observable<Page<RoleDefinitionInner>> listNextAsync(@NonNull String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .toObservable()
            .concatMap((Page<RoleDefinitionInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listNextAsync(nextPageLink1));
            });
    }

    /**
     * Get all role definitions that are applicable at scope and above.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;RoleDefinitionInner&gt;&gt; object if successful.
     */
    public Single<Page<RoleDefinitionInner>> listNextSinglePageAsync(@NonNull String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<RoleDefinitionInner>> res) -> res.body());
    }
}
